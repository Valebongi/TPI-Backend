1) MS de Pedidos (Orders MS) ‚Äî Front-facing / Cliente
Prop√≥sito / responsabilidad
Registrar nueva Solicitud de transporte (cliente crea solicitud + crea contenedor si corresponde).


Registro / consulta de Cliente (si no existe, crear).


Mostrar estado/seguimiento del env√≠o al cliente (lectura).


Calcular y devolver estimaciones iniciales (costoEstimado / tiempoEstimado) consultando al Logistics MS/Fleet (ver flujo).


Entidades / clases (del modelo m√≠nimo)
Solicitud (n√∫mero, contenedorId, clienteId, costoEstimado, tiempoEstimado, costoFinal, tiempoReal, estado)


Contenedor (id, peso, volumen, estado, clienteId)


Cliente (id, nombre, apellido, email, tel√©fono, keycloakId opcional)


DB: PostgreSQL (base de datos propia del servicio ‚Äî Database per Service recomendado para autonom√≠a y evitar acoplamiento). Justificaci√≥n: Requests tienen ciclo de vida propio, cambios frecuentes por usuarios.
Tecnolog√≠as / despliegue
Java + Spring Boot (requisito del enunciado). Docker container.


API Gateway delante (ruta /api/orders/**).


Comunicaci√≥n
Externo (cliente ‚Üí API Gateway ‚Üí Orders MS): REST over HTTPS, JSON.


Interno (Orders ‚Üí Logistics): s√≠ncrono REST/HTTP JSON para solicitar rutas tentativas; async events (Kafka) para notificar cambios importantes (SolicitudCreada, RutaAsignada) que otros servicios consumen. Razonamiento: peticiones puntuales de c√°lculo/estimaci√≥n requieren respuesta inmediata (HTTP), pero notificaciones de dominio deben ser decoupled (Kafka) para resiliencia.



M√©todo
Endpoint
Descripci√≥n
Autorizaci√≥n
GET
/clientes
Listar todos los clientes
ADMIN
GET
/clientes/{id}
Consultar cliente por ID
ADMIN / CLIENTE
POST
/clientes
Registrar nuevo cliente
ADMIN
PUT
/clientes/{id}
Modificar datos de cliente
ADMIN / CLIENTE
GET
/contenedores
Listar contenedores
ADMIN / CLIENTE
GET
/contenedores/{id}
Consultar un contenedor
ADMIN / CLIENTE
POST
/contenedores
Registrar contenedor de cliente
ADMIN / CLIENTE
PUT
/contenedores/{id}
Actualizar datos de contenedor
ADMIN
GET
/solicitudes
Listar solicitudes
ADMIN / CLIENTE
GET
/solicitudes/{id}
Ver detalles de solicitud
ADMIN / CLIENTE
POST
/solicitudes
Crear solicitud de transporte
CLIENTE
PUT
/solicitudes/{id}/estado
Cambiar estado (pendiente, en tr√°nsito, completada)
ADMIN / LOG√çSTICA
GET
/solicitudes/{id}/seguimiento
Ver ubicaci√≥n actual del contenedor (consulta a Log√≠stica)
CLIENTE


Roles (Keycloak)
Cliente: puede crear/consultar s√≥lo sus solicitudes.


Operador/Admin: puede ver/editar (via Admin UI / admin endpoints).


Transportista: s√≥lo lectura de lo asignado (por ID/rol).



2) MS de Log√≠stica (Routing / Execution MS) ‚Äî Core domain
Prop√≥sito / responsabilidad
Generar rutas tentativas (lista de tramos) y costes aproximados.


Asignar / planificar tramos a camiones (seg√∫n disponibilidad y restricciones de peso/volumen).


Registrar inicio/fin de tramo (transportista).


Calcular costos reales y tiempos reales al finalizar (guardar en Solicitud).


Integraci√≥n con API externa: Google Maps Directions para distancias/tiempos entre coordenadas.


Entidades / clases
Ruta (solicitudId, cantidadTramos, cantidadDepositos, listaTramos)


Tramo (id, origen(coordenadas), destino(coordenadas), tipo, estado, costoAproximado, costoReal, fechaHoraInicio, fechaHoraFin, camionId)


(Referencias a Contenedor y Solicitud por id)


DB: PostgreSQL propia del servicio (almacena rutas y tramos; puede almacenar copias shadow de algunos datos para c√°lculo sin afectar maestros). Justificaci√≥n: l√≥gica de rutas es core, necesita transaccionalidad propia.
Tecnolog√≠as / despliegue
Java + Spring Boot, Docker.


Biblioteca HTTP client para Google Maps (cache de resultados para evitar l√≠mites).


Comunicaci√≥n
Recibe solicitudes de estimaci√≥n desde Orders MS por REST/HTTP JSON.


Llama a Fleet MS (s√≠ncrono REST) para consultar camiones elegibles / tarifas por cami√≥n cuando asigna.


Publica eventos as√≠ncronos (Kafka): RutaGenerada, TramoAsignado, TramoIniciado, TramoFinalizado (los consume Orders MS y Fleet MS). Razonamiento: planificaci√≥n y ejecuci√≥n generan muchos eventos y conviene desacoplar.


Para operaciones cr√≠ticas (inicio/fin tramo desde app de transportista): REST sobre HTTPS (transportista -> API GW -> Routing MS) y luego el MS publica evento.



M√©todo
Endpoint
Descripci√≥n
Autorizaci√≥n
GET
/rutas
Listar rutas activas
ADMIN / LOG√çSTICA
GET
/rutas/{id}
Consultar detalle de una ruta
ADMIN / LOG√çSTICA
POST
/rutas
Crear una nueva ruta asociada a una solicitud
LOG√çSTICA
PUT
/rutas/{id}
Actualizar estado o informaci√≥n de la ruta
LOG√çSTICA
GET
/rutas/{id}/tramos
Listar tramos de una ruta
LOG√çSTICA
POST
/rutas/{id}/tramos
Agregar un tramo nuevo
LOG√çSTICA
PUT
/tramos/{id}
Actualizar tramo (costo real, hora fin, etc.)
LOG√çSTICA
GET
/rutas/{id}/posici√≥n
Obtener posici√≥n actual del cami√≥n (consulta a API de Google Maps)
CLIENTE / LOG√çSTICA




Reglas de negocio clave implementadas aqu√≠
Validaci√≥n: un cami√≥n no puede exceder peso/volumen del contenedor (RN obligatoria).


C√°lculo de costos reales (suma: km * costo por km del cami√≥n + consumo * precio litro + estad√≠a dep√≥sitos).



3) MS Administraci√≥n / Fleet & Master Data (Fleet MS) ‚Äî Admin & maestros
Prop√≥sito / responsabilidad
ABM de Dep√≥sitos, Camiones, Tarifas, Par√°metros globales (valor litro, cargo gesti√≥n por tramo, rangos por volumen/peso, costo estad√≠a por dep√≥sito).


Proveer datos para c√°lculo de estimaciones y asignaciones (camiones aptos, costos por km, consumos).


Exponer listados de contenedores en dep√≥sitos (estado), camiones libres/ocupados (para interfaz Operador).


Entidades / clases
Dep√≥sito (id, nombre, direcci√≥n, coordenadas, costoEstadiaDiario)


Cami√≥n (id, dominio, nombreTransportista, telefono, capacidadPeso, capacidadVolumen, disponibilidad, costoBaseKm, consumoPromedio)


Tarifa (modelo elegido por el grupo ‚Äî sugerencia: por rangos de volumen/peso o por tipo de cami√≥n)


ParametroGlobal (valorLitro, cargoGestionPorTramo, etc.)


DB: PostgreSQL propia (datos maestros). Justificaci√≥n: datos maestros deben ser transaccionales y versionados/ auditables.
Tecnolog√≠as / despliegue
Java + Spring Boot, Docker. Admin UI (solo para Operador/Administrador roles). Swagger para endpoints ABM.


Comunicaci√≥n
Expuesto por REST/HTTPS JSON para consultas internas (Logistics MS solicita camiones aptos, tarifas).


Consumo de eventos Kafka para actualizar estados locales si es necesario (por ejemplo TramoIniciado -> poner camion como ocupado).






















M√©todo
Endpoint
Descripci√≥n
Autorizaci√≥n
GET
/camiones
Listar camiones disponibles
ADMIN / LOG√çSTICA
GET
/camiones/{id}
Consultar cami√≥n
ADMIN / LOG√çSTICA
POST
/camiones
Registrar nuevo cami√≥n
ADMIN
PUT
/camiones/{id}
Modificar estado o datos
ADMIN
GET
/dep√≥sitos
Listar dep√≥sitos
ADMIN / LOG√çSTICA
GET
/dep√≥sitos/{id}
Consultar dep√≥sito
ADMIN / LOG√çSTICA
POST
/dep√≥sitos
Registrar nuevo dep√≥sito
ADMIN
GET
/tarifas
Listar tarifas disponibles
ADMIN / LOG√çSTICA
GET
/tarifas/{id}
Consultar detalle de tarifa
ADMIN / LOG√çSTICA
POST
/tarifas
Crear nueva tarifa
ADMIN
PUT
/tarifas/{id}
Actualizar valor de tarifa
ADMIN


     üìûCOMUNICACI√ìN ENTRE MICROSERVICIOS:

Origen
Destino
Canal
Prop√≥sito
Pedidos
Log√≠stica
REST (JSON)
Consultar estado de ruta y ubicaci√≥n
Log√≠stica
Administraci√≥n
REST (JSON)
Obtener datos de camiones, dep√≥sitos, tarifas
Log√≠stica
Google Maps API
HTTPS (JSON)
Obtener datos geogr√°ficos
Todos
Keycloak
HTTPS (JWT)
Autenticaci√≥n y roles





1) MS de Pedidos (Orders MS) ‚Äî Front-facing / Cliente
Prop√≥sito / responsabilidad
Registrar nueva Solicitud de transporte (cliente crea solicitud + crea contenedor si corresponde).


Registro / consulta de Cliente (si no existe, crear).


Mostrar estado/seguimiento del env√≠o al cliente (lectura).


Calcular y devolver estimaciones iniciales (costoEstimado / tiempoEstimado) consultando al Logistics MS/Fleet (ver flujo).


Entidades / clases (del modelo m√≠nimo)
Solicitud (n√∫mero, contenedorId, clienteId, costoEstimado, tiempoEstimado, costoFinal, tiempoReal, estado)


Contenedor (id, peso, volumen, estado, clienteId)


Cliente (id, nombre, apellido, email, tel√©fono, keycloakId opcional)


DB: PostgreSQL (base de datos propia del servicio ‚Äî Database per Service recomendado para autonom√≠a y evitar acoplamiento). Justificaci√≥n: Requests tienen ciclo de vida propio, cambios frecuentes por usuarios.
Tecnolog√≠as / despliegue
Java + Spring Boot (requisito del enunciado). Docker container.


API Gateway delante (ruta /api/orders/**).


Comunicaci√≥n
Externo (cliente ‚Üí API Gateway ‚Üí Orders MS): REST over HTTPS, JSON.


Interno (Orders ‚Üí Logistics): s√≠ncrono REST/HTTP JSON para solicitar rutas tentativas; async events (Kafka) para notificar cambios importantes (SolicitudCreada, RutaAsignada) que otros servicios consumen. Razonamiento: peticiones puntuales de c√°lculo/estimaci√≥n requieren respuesta inmediata (HTTP), pero notificaciones de dominio deben ser decoupled (Kafka) para resiliencia.



M√©todo
Endpoint
Descripci√≥n
Autorizaci√≥n
GET
/clientes
Listar todos los clientes
ADMIN
GET
/clientes/{id}
Consultar cliente por ID
ADMIN / CLIENTE
POST
/clientes
Registrar nuevo cliente
ADMIN
PUT
/clientes/{id}
Modificar datos de cliente
ADMIN / CLIENTE
GET
/contenedores
Listar contenedores
ADMIN / CLIENTE
GET
/contenedores/{id}
Consultar un contenedor
ADMIN / CLIENTE
POST
/contenedores
Registrar contenedor de cliente
ADMIN / CLIENTE
PUT
/contenedores/{id}
Actualizar datos de contenedor
ADMIN
GET
/solicitudes
Listar solicitudes
ADMIN / CLIENTE
GET
/solicitudes/{id}
Ver detalles de solicitud
ADMIN / CLIENTE
POST
/solicitudes
Crear solicitud de transporte
CLIENTE
PUT
/solicitudes/{id}/estado
Cambiar estado (pendiente, en tr√°nsito, completada)
ADMIN / LOG√çSTICA
GET
/solicitudes/{id}/seguimiento
Ver ubicaci√≥n actual del contenedor (consulta a Log√≠stica)
CLIENTE


Roles (Keycloak)
Cliente: puede crear/consultar s√≥lo sus solicitudes.


Operador/Admin: puede ver/editar (via Admin UI / admin endpoints).


Transportista: s√≥lo lectura de lo asignado (por ID/rol).



2) MS de Log√≠stica (Routing / Execution MS) ‚Äî Core domain
Prop√≥sito / responsabilidad
Generar rutas tentativas (lista de tramos) y costes aproximados.


Asignar / planificar tramos a camiones (seg√∫n disponibilidad y restricciones de peso/volumen).


Registrar inicio/fin de tramo (transportista).


Calcular costos reales y tiempos reales al finalizar (guardar en Solicitud).


Integraci√≥n con API externa: Google Maps Directions para distancias/tiempos entre coordenadas.


Entidades / clases
Ruta (solicitudId, cantidadTramos, cantidadDepositos, listaTramos)


Tramo (id, origen(coordenadas), destino(coordenadas), tipo, estado, costoAproximado, costoReal, fechaHoraInicio, fechaHoraFin, camionId)


(Referencias a Contenedor y Solicitud por id)


DB: PostgreSQL propia del servicio (almacena rutas y tramos; puede almacenar copias shadow de algunos datos para c√°lculo sin afectar maestros). Justificaci√≥n: l√≥gica de rutas es core, necesita transaccionalidad propia.
Tecnolog√≠as / despliegue
Java + Spring Boot, Docker.


Biblioteca HTTP client para Google Maps (cache de resultados para evitar l√≠mites).


Comunicaci√≥n
Recibe solicitudes de estimaci√≥n desde Orders MS por REST/HTTP JSON.


Llama a Fleet MS (s√≠ncrono REST) para consultar camiones elegibles / tarifas por cami√≥n cuando asigna.


Publica eventos as√≠ncronos (Kafka): RutaGenerada, TramoAsignado, TramoIniciado, TramoFinalizado (los consume Orders MS y Fleet MS). Razonamiento: planificaci√≥n y ejecuci√≥n generan muchos eventos y conviene desacoplar.


Para operaciones cr√≠ticas (inicio/fin tramo desde app de transportista): REST sobre HTTPS (transportista -> API GW -> Routing MS) y luego el MS publica evento.



M√©todo
Endpoint
Descripci√≥n
Autorizaci√≥n
GET
/rutas
Listar rutas activas
ADMIN / LOG√çSTICA
GET
/rutas/{id}
Consultar detalle de una ruta
ADMIN / LOG√çSTICA
POST
/rutas
Crear una nueva ruta asociada a una solicitud
LOG√çSTICA
PUT
/rutas/{id}
Actualizar estado o informaci√≥n de la ruta
LOG√çSTICA
GET
/rutas/{id}/tramos
Listar tramos de una ruta
LOG√çSTICA
POST
/rutas/{id}/tramos
Agregar un tramo nuevo
LOG√çSTICA
PUT
/tramos/{id}
Actualizar tramo (costo real, hora fin, etc.)
LOG√çSTICA
GET
/rutas/{id}/posici√≥n
Obtener posici√≥n actual del cami√≥n (consulta a API de Google Maps)
CLIENTE / LOG√çSTICA




Reglas de negocio clave implementadas aqu√≠
Validaci√≥n: un cami√≥n no puede exceder peso/volumen del contenedor (RN obligatoria).


C√°lculo de costos reales (suma: km * costo por km del cami√≥n + consumo * precio litro + estad√≠a dep√≥sitos).



3) MS Administraci√≥n / Fleet & Master Data (Fleet MS) ‚Äî Admin & maestros
Prop√≥sito / responsabilidad
ABM de Dep√≥sitos, Camiones, Tarifas, Par√°metros globales (valor litro, cargo gesti√≥n por tramo, rangos por volumen/peso, costo estad√≠a por dep√≥sito).


Proveer datos para c√°lculo de estimaciones y asignaciones (camiones aptos, costos por km, consumos).


Exponer listados de contenedores en dep√≥sitos (estado), camiones libres/ocupados (para interfaz Operador).


Entidades / clases
Dep√≥sito (id, nombre, direcci√≥n, coordenadas, costoEstadiaDiario)


Cami√≥n (id, dominio, nombreTransportista, telefono, capacidadPeso, capacidadVolumen, disponibilidad, costoBaseKm, consumoPromedio)


Tarifa (modelo elegido por el grupo ‚Äî sugerencia: por rangos de volumen/peso o por tipo de cami√≥n)


ParametroGlobal (valorLitro, cargoGestionPorTramo, etc.)


DB: PostgreSQL propia (datos maestros). Justificaci√≥n: datos maestros deben ser transaccionales y versionados/ auditables.
Tecnolog√≠as / despliegue
Java + Spring Boot, Docker. Admin UI (solo para Operador/Administrador roles). Swagger para endpoints ABM.


Comunicaci√≥n
Expuesto por REST/HTTPS JSON para consultas internas (Logistics MS solicita camiones aptos, tarifas).


Consumo de eventos Kafka para actualizar estados locales si es necesario (por ejemplo TramoIniciado -> poner camion como ocupado).






















M√©todo
Endpoint
Descripci√≥n
Autorizaci√≥n
GET
/camiones
Listar camiones disponibles
ADMIN / LOG√çSTICA
GET
/camiones/{id}
Consultar cami√≥n
ADMIN / LOG√çSTICA
POST
/camiones
Registrar nuevo cami√≥n
ADMIN
PUT
/camiones/{id}
Modificar estado o datos
ADMIN
GET
/dep√≥sitos
Listar dep√≥sitos
ADMIN / LOG√çSTICA
GET
/dep√≥sitos/{id}
Consultar dep√≥sito
ADMIN / LOG√çSTICA
POST
/dep√≥sitos
Registrar nuevo dep√≥sito
ADMIN
GET
/tarifas
Listar tarifas disponibles
ADMIN / LOG√çSTICA
GET
/tarifas/{id}
Consultar detalle de tarifa
ADMIN / LOG√çSTICA
POST
/tarifas
Crear nueva tarifa
ADMIN
PUT
/tarifas/{id}
Actualizar valor de tarifa
ADMIN


     üìûCOMUNICACI√ìN ENTRE MICROSERVICIOS:

Origen
Destino
Canal
Prop√≥sito
Pedidos
Log√≠stica
REST (JSON)
Consultar estado de ruta y ubicaci√≥n
Log√≠stica
Administraci√≥n
REST (JSON)
Obtener datos de camiones, dep√≥sitos, tarifas
Log√≠stica
Google Maps API
HTTPS (JSON)
Obtener datos geogr√°ficos
Todos
Keycloak
HTTPS (JWT)
Autenticaci√≥n y roles





